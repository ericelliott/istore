{"version":3,"sources":["../source/index.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;yBAES,WAAW;;;;qBAClB,OAAO;;;;sBACH,QAAQ;;;;uBACP,SAAS;;;;kBACd,IAAI;;;;AAEnB,IAAM,OAAO,GAAG,SAAV,OAAO,CAAa,GAAG,EAAE;AAC7B,MAAI,KAAK,YAAA;MAAE,QAAQ,YAAA,CAAC;;AAEpB,MAAM,OAAO,GAAG,EAAE,CAAC;;AAEnB,MAAM,KAAK,GAAG,SAAR,KAAK,GAAe;AACxB,WAAO,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;GACpC,CAAC;;AAEF,MAAM,MAAM,GAAG,SAAS,MAAM,CAAE,KAAK,EAAE;AACrC,QAAI,KAAK,EAAE,KAAK,KAAK,EAAE,OAAO;;AAE9B,QAAM,QAAQ,GAAG,KAAK,EAAE,CAAC;;AAEzB,WAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACpB,YAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAC,KAAK,EAAL,KAAK,EAAE,QAAQ,EAAR,QAAQ,EAAC,CAAC,CAAC;GAC5C,CAAC;;AAEF,SAAO,CAAC,IAAI,CAAC,uBAAU,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;;AAEpC,OAAK,GACH,qBAAQ,kBAAkB,CAAC,oBAAO,YAAY,CAAC,CAC9C,OAAO,CAAC;AACP,OAAG,EAAC,aAAC,GAAG,EAAE;AACR,aAAO,KAAK,EAAE,CAAC,KAAK,CAAC,wBAAG,GAAG,CAAC,CAAC,CAAC;KAC/B;AACD,OAAG,EAAC,aAAC,GAAG,EAAE,GAAG,EAAE;AACb,YAAM,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,wBAAG,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;AACpC,aAAO,IAAI,CAAC;KACb;AACD,YAAQ,EAAC,kBAAC,GAAG,EAAE,EAAE,EAAE;AACjB,aAAO,MAAM,CAAC,KAAK,EAAE,CAAC,QAAQ,CAAC,wBAAG,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;KAC9C;AACD,UAAM,EAAC,gBAAC,GAAG,EAAE;AACX,YAAM,CAAC,KAAK,EAAE,CAAC,QAAQ,CAAC,wBAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAClC,aAAO,IAAI,CAAC;KACb;AACD,QAAI,EAAC,gBAAG;AACN,aAAO,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC;KACvB;GACF,CAAC,CACD,OAAO,CAAC,YAAY;AACnB,QAAM,MAAM,GAAG,gBAAG,UAAU,CAAC,SAAS,CACpC,IAAI,EAAE,QAAQ,EACd,UAAC,EAAE;aAAK,EAAE,CAAC,CAAC,CAAC;KAAA,CAAC,CAAC;;AAEjB,QAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC/C,QAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;GAC1C,CAAC,CAAC;;AAEL,UAAQ,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC;;AAE1B,SAAO,qBAAQ,MAAM,CACnB,QAAQ,EACR,EAAE,KAAK,EAAL,KAAK,EAAE,CACV,CAAC;CACH,CAAC;;qBAEa,OAAO","file":"index.js","sourcesContent":["'use strict';\n\nimport immutable from 'immutable';\nimport dp from 'dpath';\nimport events from 'events';\nimport stampit from 'stampit';\nimport Rx from 'rx';\n\nconst irecord = function (obj) {\n  let stamp, instance;\n\n  const history = [];\n\n  const state = function () {\n    return history[history.length - 1];\n  };\n\n  const update = function update (value) {\n    if (state() === value) return;\n\n    const previous = state();\n\n    history.push(value);\n    instance.emit('change', {value, previous});\n  };\n\n  history.push(immutable.fromJS(obj));\n\n  stamp =\n    stampit.convertConstructor(events.EventEmitter)\n    .methods({\n      get (key) {\n        return state().getIn(dp(key));\n      },\n      set (key, val) {\n        update(state().setIn(dp(key), val));\n        return this;\n      },\n      updateIn (key, fn) {\n        return update(state().updateIn(dp(key), fn));\n      },\n      remove (key) {\n        update(state().removeIn(dp(key)));\n        return this;\n      },\n      toJS () {\n        return state().toJS();\n      }\n    })\n    .enclose(function () {\n      const source = Rx.Observable.fromEvent(\n        this, 'change',\n        (ev) => ev[0]);\n\n      this.subscribe = source.subscribe.bind(source);\n      this.filter = source.filter.bind(source);\n    });\n\n  instance = stamp.create();\n\n  return stampit.extend(\n    instance,\n    { stamp }\n  );\n};\n\nexport default irecord;\n"]}